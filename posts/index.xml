<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Immuthex的博客</title>
    <link>https://www.immuthex.com/posts/</link>
    <description>Recent content in Posts on Immuthex的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>©2021 immuthex</copyright>
    <lastBuildDate>Mon, 08 Mar 2021 20:26:10 +0800</lastBuildDate>
    
        <atom:link href="https://www.immuthex.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reactor Netty参考指南 - 3.TCP服务端</title>
      <link>https://www.immuthex.com/posts/reactor-netty-reference-guide/tcp-server/</link>
      <pubDate>Mon, 08 Mar 2021 20:26:10 +0800</pubDate>
      
      <guid>https://www.immuthex.com/posts/reactor-netty-reference-guide/tcp-server/</guid>
      <description>&lt;h2 id=&#34;目录contents&#34;&gt;&lt;a href=&#34;../contents&#34;&gt;目录&lt;/a&gt;
&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;原文地址httpsprojectreactoriodocsnettyreleasereferenceindexhtmltcp-server&#34;&gt;&lt;a href=&#34;https://projectreactor.io/docs/netty/release/reference/index.html#tcp-server&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;原文地址&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Reactor Netty&lt;/code&gt;提供了易于使用和配置的&lt;a href=&#34;https://projectreactor.io/docs/netty/release/api/reactor/netty/tcp/TcpServer.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;TcpServer&lt;/code&gt;&lt;/a&gt;
 。它隐藏了创建&lt;code&gt;TCP&lt;/code&gt;服务器所需的大部分&lt;code&gt;Netty&lt;/code&gt;的功能，并增加了&lt;code&gt;Reactive Streams&lt;/code&gt;背压。&lt;/p&gt;
&lt;h1 id=&#34;31启动和停止&#34;&gt;3.1.启动和停止&lt;/h1&gt;
&lt;p&gt;如果要启动一个&lt;code&gt;TCP&lt;/code&gt;服务器，您必须创建并且配置一个&lt;a href=&#34;https://projectreactor.io/docs/netty/release/api/reactor/netty/tcp/TcpServer.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;TcpServer&lt;/code&gt;&lt;/a&gt;
实例对象。默认情况下，&lt;code&gt;host&lt;/code&gt;
是配置为任何本地地址，当执行&lt;code&gt;bind&lt;/code&gt;操作的时候系统会选择一个临时端口。下面的例子展示了怎么创建并且配置一个&lt;code&gt;TcpServer&lt;/code&gt;实例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-examples/src/main/java/reactor/netty/examples/documentation/tcp/server/create/Application.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.DisposableServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.tcp.TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		DisposableServer server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
				TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;//&amp;lt;1&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindNow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//&amp;lt;2&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
		server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDispose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
		      &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lt;1&amp;gt; 创建一个&lt;a href=&#34;https://projectreactor.io/docs/netty/release/api/reactor/netty/tcp/TcpServer.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;TcpServer&lt;/code&gt;&lt;/a&gt;
实例用来做配置操作。&lt;/p&gt;
&lt;p&gt;&amp;lt;2&amp;gt; 使用阻塞等待的方式启动服务器，直到初始化完成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;返回的&lt;a href=&#34;https://projectreactor.io/docs/netty/release/api/reactor/netty/DisposableServer.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;DisposableServer&lt;/code&gt;&lt;/a&gt;
提供了简单的服务器API，包括&lt;a href=&#34;https://projectreactor.io/docs/netty/release/api/reactor/netty/DisposableChannel.html#disposeNow-java.time.Duration-&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;disposeNow()&lt;/code&gt;&lt;/a&gt;
，这个方法可以以阻塞等待的方式来关闭服务器。&lt;/p&gt;
&lt;h2 id=&#34;311host和port&#34;&gt;3.1.1.Host和Port&lt;/h2&gt;
&lt;p&gt;想要设置特定&lt;code&gt;host&lt;/code&gt;和&lt;code&gt;port&lt;/code&gt;，您可以用下面的方式来配置&lt;code&gt;TCP&lt;/code&gt;服务器：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-examples/src/main/java/reactor/netty/examples/documentation/tcp/server/address/Application.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.DisposableServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.tcp.TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		DisposableServer server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
				TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;host&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//&amp;lt;1&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;8080&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//&amp;lt;2&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindNow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDispose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
		      &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lt;1&amp;gt; 配置&lt;code&gt;TCP&lt;/code&gt;服务器的host&lt;/p&gt;
&lt;p&gt;&amp;lt;2&amp;gt; 配置&lt;code&gt;TCP&lt;/code&gt;服务器的port&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;32直接初始化&#34;&gt;3.2.直接初始化&lt;/h1&gt;
&lt;p&gt;默认情况下，&lt;code&gt;TcpServer&lt;/code&gt;初始化资源的操作在需要使用的时候才进行。这意味着初始化加载的时候&lt;code&gt;bind operation&lt;/code&gt;会占用额外的时间：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件循环组&lt;/li&gt;
&lt;li&gt;native传输库（当使用了native传输的时候）&lt;/li&gt;
&lt;li&gt;用于安全性的native库（使用了&lt;code&gt;OpenSsl&lt;/code&gt;的时候）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当您需要预加载这些资源的时候，您可以按照以下方式来配置&lt;code&gt;TcpServer&lt;/code&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-examples/src/main/java/reactor/netty/examples/documentation/tcp/server/warmup/Application.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.DisposableServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.tcp.TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		TcpServer tcpServer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
				TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;inbound&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; outbound&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; inbound&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;receive&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;

		tcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;warmup&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//&amp;lt;1&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		DisposableServer server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindNow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDispose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
		      &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lt;1&amp;gt; 初始化和加载事件循环组，native传输库和用于安全性的native库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;33写出数据&#34;&gt;3.3.写出数据&lt;/h1&gt;
&lt;p&gt;如果要发送数据到一个已连接的客户端，您必须添加一个I/O处理器。这个I/O处理器可以通过&lt;a href=&#34;https://projectreactor.io/docs/netty/release/api/reactor/netty/NettyOutbound.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;NettyOutbound&lt;/code&gt;&lt;/a&gt;
来写出数据。下面的例子展示了怎么添加一个I/O处理器：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-examples/src/main/java/reactor/netty/examples/documentation/tcp/server/send/Application.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.core.publisher.Mono&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.DisposableServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.tcp.TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		DisposableServer server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
				TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;inbound&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; outbound&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; outbound&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sendString&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Mono&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;just&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)))&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//&amp;lt;1&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindNow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDispose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
		      &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lt;1&amp;gt; 给连接的客户端发送&lt;code&gt;hello&lt;/code&gt;字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;34消费数据&#34;&gt;3.4.消费数据&lt;/h1&gt;
&lt;p&gt;如果要接收从连接的客户端发过来的数据，您必须添加一个I/O处理器。这个I/O处理器可以通过&lt;a href=&#34;https://projectreactor.io/docs/netty/release/api/reactor/netty/NettyInbound.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;NettyInbound&lt;/code&gt;&lt;/a&gt;
来读取数据。下面的例子展示了怎么使用：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-examples/src/main/java/reactor/netty/examples/documentation/tcp/server/read/Application.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.DisposableServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.tcp.TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		DisposableServer server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
				TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;inbound&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; outbound&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; inbound&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;receive&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//&amp;lt;1&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindNow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDispose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
		      &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lt;1&amp;gt; 接收从连接到客户端发过来的数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;35生命周期回调&#34;&gt;3.5.生命周期回调&lt;/h1&gt;
&lt;p&gt;下面的生命周期回调用参数是提供给您用来扩展&lt;code&gt;TcpServer&lt;/code&gt;的：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Callback&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;doOnBind&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当服务器channel即将被绑定的时候调用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;doOnBound&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当服务器channel已经被绑定的时候调用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;doOnChannelInit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当channel初始化的时候被调用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;doOnConnection&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当一个远程客户端连接上的时候被调用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;doOnUnbound&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当服务器channel解绑的时候被调用。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下面的例子展示了怎么使用&lt;code&gt;doOnConnection&lt;/code&gt;和&lt;code&gt;doOnChannelInit&lt;/code&gt;回调：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-examples/src/main/java/reactor/netty/examples/documentation/tcp/server/lifecycle/Application.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io.netty.handler.logging.LoggingHandler&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io.netty.handler.timeout.ReadTimeoutHandler&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.DisposableServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.tcp.TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.concurrent.TimeUnit&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		DisposableServer server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
				TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;doOnConnection&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;conn &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
				             conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addHandler&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ReadTimeoutHandler&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;10&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; TimeUnit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)))&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//&amp;lt;1&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;doOnChannelInit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;((&lt;/span&gt;observer&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; channel&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; remoteAddress&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;
				             channel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pipeline&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
				                    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addFirst&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; LoggingHandler&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reactor.netty.examples&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)))&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//&amp;lt;2&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindNow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDispose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
		      &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lt;1&amp;gt; 当一个远程客户端连接的时候&lt;code&gt;ReadTimeoutHandler&lt;/code&gt;扩展了&lt;code&gt;Netty&lt;/code&gt; pipeline。&lt;/p&gt;
&lt;p&gt;&amp;lt;2&amp;gt; 当初始化channel的时候&lt;code&gt;LoggingHandler&lt;/code&gt;扩展了&lt;code&gt;Netty&lt;/code&gt; pipeline。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;36tcp层面的配置&#34;&gt;3.6.TCP层面的配置&lt;/h1&gt;
&lt;p&gt;这一章节描述了三种TCP层面的配置方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#361%e8%ae%be%e7%bd%aechannel-options&#34;&gt;设置Channel Options&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#362%e4%bd%bf%e7%94%a8wire-logger&#34;&gt;使用Wire Logger&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#363%e4%bd%bf%e7%94%a8event-loop-group&#34;&gt;使用Event Loop Group&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;361设置channel-options&#34;&gt;3.6.1.设置Channel Options&lt;/h2&gt;
&lt;p&gt;默认情况下，&lt;code&gt;TCP&lt;/code&gt;服务器配置了以下options：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-core/src/main/java/reactor/netty/tcp/TcpServerBind.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;TcpServerBind&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	Map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ChannelOption&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&amp;gt;,&lt;/span&gt; Boolean&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; childOptions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	childOptions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ChannelOption&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;AUTO_READ&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	childOptions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ChannelOption&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TCP_NODELAY&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TcpServerConfig&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
			Collections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;singletonMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ChannelOption&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SO_REUSEADDR&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt;
			childOptions&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InetSocketAddress&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;DEFAULT_PORT&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;如果需要添加新的option或者修改已有的option，您可以使用如下的方式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-examples/src/main/java/reactor/netty/examples/documentation/tcp/server/channeloptions/Application.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io.netty.channel.ChannelOption&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.DisposableServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.tcp.TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		DisposableServer server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
				TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;option&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ChannelOption&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CONNECT_TIMEOUT_MILLIS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 10000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindNow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDispose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
		      &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;您可以通过以下的链接找到更多关于&lt;code&gt;Netty&lt;/code&gt;channel options的信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://netty.io/4.1/api/io/netty/channel/ChannelOption.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;ChannelOption&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/net/socketOpt.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Socket Options&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;362使用wire-logger&#34;&gt;3.6.2.使用Wire Logger&lt;/h2&gt;
&lt;p&gt;Reactor Netty提供了线路记录（wire logging）用来检查点对点的流量。默认情况下，线路记录是关闭的。如果想要开启它，您必须将日志&lt;code&gt;reactor.netty.tcp.TcpServer&lt;/code&gt;的设置为&lt;code&gt;DEBUG&lt;/code&gt;等级并且按如下方式进行配置：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-examples/src/main/java/reactor/netty/examples/documentation/tcp/server/wiretap/Application.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.DisposableServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.tcp.TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		DisposableServer server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
				TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wiretap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//&amp;lt;1&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindNow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDispose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
		      &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lt;1&amp;gt; 开启线路记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;默认情况下，线路记录在输出内容的时候会使用&lt;a href=&#34;https://projectreactor.io/docs/netty/release/api/reactor/netty/transport/logging/AdvancedByteBufFormat.html#HEX_DUMP&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;AdvancedByteBufFormat#HEX_DUMP&lt;/a&gt;
。您也可以通过配置&lt;code&gt;TcpServer&lt;/code&gt;改为&lt;a href=&#34;https://projectreactor.io/docs/netty/release/api/reactor/netty/transport/logging/AdvancedByteBufFormat.html#SIMPLE&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;AdvancedByteBufFormat#SIMPLE&lt;/a&gt;
或者&lt;a href=&#34;https://projectreactor.io/docs/netty/release/api/reactor/netty/transport/logging/AdvancedByteBufFormat.html#TEXTUAL&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;AdvancedByteBufFormat#TEXTUAL&lt;/a&gt;
：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-examples/src/main/java/reactor/netty/examples/documentation/tcp/server/wiretap/custom/Application.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io.netty.handler.logging.LogLevel&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.DisposableServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.tcp.TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.transport.logging.AdvancedByteBufFormat&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		DisposableServer server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
				TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;wiretap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;logger-name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; LogLevel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DEBUG&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AdvancedByteBufFormat&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TEXTUAL&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//&amp;lt;1&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindNow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDispose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
		      &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lt;1&amp;gt; 开启线路记录并使用&lt;a href=&#34;https://projectreactor.io/docs/netty/release/api/reactor/netty/transport/logging/AdvancedByteBufFormat.html#TEXTUAL&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;AdvancedByteBufFormat#TEXTUAL&lt;/a&gt;
来输出内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;363使用event-loop-group&#34;&gt;3.6.3.使用Event Loop Group&lt;/h2&gt;
&lt;p&gt;默认情况下，&lt;code&gt;TCP&lt;/code&gt;服务器使用一个&amp;quot;Event Loop Group&amp;quot;，工作线程数等于初始化的时候可以用的处理器数量（但是最小树是4）。您也可以使用&lt;a href=&#34;https://projectreactor.io/docs/netty/release/api/reactor/netty/resources/LoopResources.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;LoopResource&lt;/a&gt;
&lt;code&gt;#server&lt;/code&gt;其中的一个方法来修改配置。&lt;/p&gt;
&lt;p&gt;默认的&lt;code&gt;Event Loop Group&lt;/code&gt;配置如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-core/src/main/java/reactor/netty/ReactorNetty.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Default worker thread count, fallback to available processor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * (but with a minimum value of 4)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String IO_WORKER_COUNT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reactor.netty.ioWorkerCount&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Default selector thread count, fallback to -1 (no selector thread)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String IO_SELECT_COUNT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reactor.netty.ioSelectCount&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Default worker thread count for UDP, fallback to available processor
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * (but with a minimum value of 4)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String UDP_IO_THREAD_COUNT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reactor.netty.udp.ioThreadCount&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Default quiet period that guarantees that the disposal of the underlying LoopResources
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * will not happen, fallback to 2 seconds.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String SHUTDOWN_QUIET_PERIOD &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reactor.netty.ioShutdownQuietPeriod&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Default maximum amount of time to wait until the disposal of the underlying LoopResources
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * regardless if a task was submitted during the quiet period, fallback to 15 seconds.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String SHUTDOWN_TIMEOUT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reactor.netty.ioShutdownTimeout&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Default value whether the native transport (epoll, kqueue) will be preferred,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * fallback it will be preferred when available
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; String NATIVE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;reactor.netty.native&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;如果需要修改这些设置，您也可以通过如下方式进行配置：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-examples/src/main/java/reactor/netty/examples/documentation/tcp/server/eventloop/Application.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.DisposableServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.resources.LoopResources&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.tcp.TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		LoopResources loop &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LoopResources&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;event-loop&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 4&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

		DisposableServer server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
				TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runOn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;loop&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindNow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDispose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
		      &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;37ssl和tls&#34;&gt;3.7.SSL和TLS&lt;/h1&gt;
&lt;p&gt;当您需要使用SSL或者TLS的时候，可以使用下面列出来方式进行配置。默认情况，如果&lt;code&gt;OpenSSL&lt;/code&gt;可用的话，则使用&lt;a href=&#34;https://netty.io/4.1/api/io/netty/handler/ssl/SslProvider.html#OPENSSL&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;SslProvider.OPENSSL&lt;/code&gt;&lt;/a&gt;
。否则使用&lt;a href=&#34;https://netty.io/4.1/api/io/netty/handler/ssl/SslProvider.html#JDK&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;SslProvider.JDK&lt;/code&gt;&lt;/a&gt;
。可以通过&lt;a href=&#34;https://netty.io/4.1/api/io/netty/handler/ssl/SslContextBuilder.html#sslProvider-io.netty.handler.ssl.SslProvider-&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;SslContextBuilder&lt;/code&gt;&lt;/a&gt;
或者设置&lt;code&gt;-Dio.netty.handler.ssl.noOpenSsl=true&lt;/code&gt;来进行切换。&lt;/p&gt;
&lt;p&gt;下面的是使用&lt;code&gt;SslContextBuilder&lt;/code&gt;的例子：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-examples/src/main/java/reactor/netty/examples/documentation/tcp/server/security/Application.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io.netty.handler.ssl.SslContextBuilder&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.DisposableServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.tcp.TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.io.File&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		File cert &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;certificate.crt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		File key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;private.key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

		SslContextBuilder sslContextBuilder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SslContextBuilder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;forServer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;cert&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; key&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

		DisposableServer server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
				TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;secure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;spec &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; spec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sslContext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sslContextBuilder&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindNow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDispose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
		      &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;371服务器名称标识&#34;&gt;3.7.1.服务器名称标识&lt;/h2&gt;
&lt;p&gt;你可以配置&lt;code&gt;TCP&lt;/code&gt;服务器的多个&lt;code&gt;SslContext&lt;/code&gt;映射到一个特定的域。配置&lt;code&gt;SNI&lt;/code&gt;映射时，可以使用确切的域名或包含通配符的域名。&lt;/p&gt;
&lt;p&gt;下面是使用包含通配符的域名的例子：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-examples/src/main/java/reactor/netty/examples/documentation/tcp/server/sni/Application.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io.netty.handler.ssl.SslContext&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io.netty.handler.ssl.SslContextBuilder&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.DisposableServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.tcp.TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.io.File&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		File defaultCert &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default_certificate.crt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		File defaultKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default_private.key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

		File testDomainCert &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default_certificate.crt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		File testDomainKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default_private.key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

		SslContext defaultSslContext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SslContextBuilder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;forServer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;defaultCert&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; defaultKey&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
		SslContext testDomainSslContext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SslContextBuilder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;forServer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;testDomainCert&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; testDomainKey&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		DisposableServer server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
				TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;secure&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;spec &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; spec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sslContext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;defaultSslContext&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
				                             &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addSniMapping&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*.test.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
				                                     testDomainSpec &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; testDomainSpec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sslContext&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;testDomainSslContext&lt;span style=&#34;color:#f92672&#34;&gt;)))&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindNow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDispose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
		      &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;38指标&#34;&gt;3.8.指标&lt;/h1&gt;
&lt;p&gt;TCP服务器支持与&lt;a href=&#34;https://micrometer.io/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Micrometer&lt;/a&gt;
的内置集成。它暴露了所有前缀为&lt;code&gt;reactor.netty.tcp.server&lt;/code&gt;的指标。&lt;/p&gt;
&lt;p&gt;下面的表格提供了TCP服务器指标的相关信息：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指标名称&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;reactor.netty.tcp.server.data.received&lt;/td&gt;
&lt;td&gt;DistributionSummary&lt;/td&gt;
&lt;td&gt;收到的数据量，以字节为单位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reactor.netty.tcp.server.data.sent&lt;/td&gt;
&lt;td&gt;DistributionSummary&lt;/td&gt;
&lt;td&gt;发送的数据量，以字节为单位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reactor.netty.tcp.server.errors&lt;/td&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;发生的错误数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reactor.netty.tcp.server.tls.handshake.time&lt;/td&gt;
&lt;td&gt;Timer&lt;/td&gt;
&lt;td&gt;TLS握手所花费的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下面额外的指标也是可用的：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ByteBufAllocator&lt;/code&gt;指标&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指标名称&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;reactor.netty.bytebuf.allocator.used.heap.memory&lt;/td&gt;
&lt;td&gt;Gauge&lt;/td&gt;
&lt;td&gt;堆内存的字节数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reactor.netty.bytebuf.allocator.used.direct.memory&lt;/td&gt;
&lt;td&gt;Gauge&lt;/td&gt;
&lt;td&gt;堆外内存的字节数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reactor.netty.bytebuf.allocator.used.heap.arenas&lt;/td&gt;
&lt;td&gt;Gauge&lt;/td&gt;
&lt;td&gt;堆内存的个数（当使用&lt;code&gt;PooledByteBufAllocator&lt;/code&gt;的时候）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reactor.netty.bytebuf.allocator.used.direct.arenas&lt;/td&gt;
&lt;td&gt;Gauge&lt;/td&gt;
&lt;td&gt;堆外内存的个数（当使用&lt;code&gt;PooledByteBufAllocator&lt;/code&gt;的时候）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reactor.netty.bytebuf.allocator.used.threadlocal.caches&lt;/td&gt;
&lt;td&gt;Gauge&lt;/td&gt;
&lt;td&gt;threadlocal的缓存数量（当使用&lt;code&gt;PooledByteBufAllocator&lt;/code&gt;的时候）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reactor.netty.bytebuf.allocator.used.tiny.cache.size&lt;/td&gt;
&lt;td&gt;Gauge&lt;/td&gt;
&lt;td&gt;微小缓存的大小（当使用&lt;code&gt;PooledByteBufAllocator&lt;/code&gt;的时候）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reactor.netty.bytebuf.allocator.used.small.cache.size&lt;/td&gt;
&lt;td&gt;Gauge&lt;/td&gt;
&lt;td&gt;小缓存的大小（当使用&lt;code&gt;PooledByteBufAllocator&lt;/code&gt;的时候）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reactor.netty.bytebuf.allocator.used.normal.cache.size&lt;/td&gt;
&lt;td&gt;Gauge&lt;/td&gt;
&lt;td&gt;一般缓存的大小（当使用&lt;code&gt;PooledByteBufAllocator&lt;/code&gt;的时候）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reactor.netty.bytebuf.allocator.used.chunk.size&lt;/td&gt;
&lt;td&gt;Gauge&lt;/td&gt;
&lt;td&gt;一个区域的块大小（当使用&lt;code&gt;PooledByteBufAllocator&lt;/code&gt;的时候）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下面的例子展示了怎么开启集成的指标：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-examples/src/main/java/reactor/netty/examples/documentation/tcp/server/metrics/Application.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.DisposableServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.tcp.TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		DisposableServer server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
				TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;metrics&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//&amp;lt;1&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindNow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDispose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
		      &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lt;1&amp;gt; 开启内建集成的Micrometer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;39unix域套接字&#34;&gt;3.9.Unix域套接字&lt;/h1&gt;
&lt;p&gt;当使用本地传输时，&lt;code&gt;TCP&lt;/code&gt;服务器支持Unix域套接字（UDS）。&lt;/p&gt;
&lt;p&gt;下面展示了怎么使用UDS：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;./../../reactor-netty-examples/src/main/java/reactor/netty/examples/documentation/tcp/server/uds/Application.java&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; io.netty.channel.unix.DomainSocketAddress&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.DisposableServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; reactor.netty.tcp.TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		DisposableServer server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;
				TcpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindAddress&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DomainSocketAddress&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/tmp/test.sock&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//&amp;lt;1&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				         &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bindNow&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onDispose&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
		      &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lt;1&amp;gt; 指定将使用的&lt;code&gt;DomainSocketAddress&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/reactor/reactor-netty/edit/master/docs/asciidoc/tcp-server.adoc&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;编辑&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;目录contents-1&#34;&gt;&lt;a href=&#34;../contents&#34;&gt;目录&lt;/a&gt;
&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>Reactor Netty参考指南 - 2.入门指南</title>
      <link>https://www.immuthex.com/posts/reactor-netty-reference-guide/getting-started/</link>
      <pubDate>Sun, 28 Feb 2021 21:14:00 +0800</pubDate>
      
      <guid>https://www.immuthex.com/posts/reactor-netty-reference-guide/getting-started/</guid>
      <description>&lt;h2 id=&#34;目录contents&#34;&gt;&lt;a href=&#34;../contents&#34;&gt;目录&lt;/a&gt;
&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;原文地址httpsprojectreactoriodocsnettyreleasereferenceindexhtmlgetting-started&#34;&gt;&lt;a href=&#34;https://projectreactor.io/docs/netty/release/reference/index.html#getting-started&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;原文地址&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;这一章节包含的内容应该可以帮助到您开始使用&lt;code&gt;Reactor Netty&lt;/code&gt;，包含内容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#21%e4%bb%8b%e7%bb%8dreactor-netty&#34;&gt;介绍Reactor Netty&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#22%e5%89%8d%e6%8f%90%e6%9d%a1%e4%bb%b6&#34;&gt;前提条件&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#23%e4%ba%86%e8%a7%a3bom%e5%92%8c%e7%89%88%e6%9c%ac%e6%96%b9%e6%a1%88&#34;&gt;了解BOM和版本方案&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#24%e8%8e%b7%e5%8f%96reactor-netty&#34;&gt;获取Reactor Netty&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;21介绍reactor-netty&#34;&gt;2.1.介绍Reactor Netty&lt;/h1&gt;
&lt;p&gt;适合于微服务架构，&lt;code&gt;Reactor Netty&lt;/code&gt;为&lt;code&gt;HTTP&lt;/code&gt;（包括Websocket），&lt;code&gt;TCP&lt;/code&gt;和&lt;code&gt;UDP&lt;/code&gt;提供了支持背压的网络引擎。&lt;/p&gt;
&lt;h1 id=&#34;22前提条件&#34;&gt;2.2.前提条件&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Reactor Netty&lt;/code&gt;需要运行在&lt;code&gt;Java 8&lt;/code&gt;及以上的版本上。&lt;/p&gt;
&lt;p&gt;它需要依赖于以下组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reactive Streams v1.0.3&lt;/li&gt;
&lt;li&gt;Reactor Core v3.x&lt;/li&gt;
&lt;li&gt;Netty v4.1.x&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;23了解bom和版本方案&#34;&gt;2.3.了解BOM和版本方案&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Reactor Netty&lt;/code&gt;是&lt;code&gt;Project Reactor BOM&lt;/code&gt;的一部分（自从&lt;code&gt;Aluminium&lt;/code&gt;发布以来）。这个设计好的列表将那些能更好的协同合作的artifacts进行分组，提供相关的版本，尽管这些artifacts中有可能有不同的版本方案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在0.9.x到1.0.x之间（Dysprosium 和 Europium），版本方案已经改变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Artifacts遵循&lt;code&gt;MAJOR.MINOR.PATCH-QUALIFIER&lt;/code&gt;的版本方案，而POM则受CalVer的启发使用&lt;code&gt;YYYY.MINOR.PATCH-QUALIFIER&lt;/code&gt;的版本方案，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MAJOR&lt;/code&gt;是当前一代的Reactor，每一代新的Reactor都可能会给项目结构带来根本性的变化（意味着可能会有很重大的迁移工作）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;YYYY&lt;/code&gt;是在给定发布周期中第一次发布GA版本的年份。（例如1.0.x的1.0.0）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.MINOR&lt;/code&gt;是从0开始，每次新的发布周期则递增的数字
&lt;ul&gt;
&lt;li&gt;对于项目来说，一般会有比较大的改变，并且可能会有适度的迁移工作&lt;/li&gt;
&lt;li&gt;对于BOM来说，允许在两个同年首次发布的情况下区分发布周期&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.PATCH&lt;/code&gt;是从0开始，每次服务发布的时候递增的数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-QUALIFIER&lt;/code&gt;是一个文本修饰词，在GA版本中被省略掉了（见下文）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遵循这一惯例的第一发布周期是2020.0.x，代号&lt;code&gt;Europium&lt;/code&gt;。该方案使用了以下限定词（注意使用破折号分隔），顺序如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-M1..-M9&lt;/code&gt;：里程碑（我们预计每次服务版本的发布不会超过9个）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-RC1..-RC9&lt;/code&gt;：候选版本（我们预计每次服务版本的发布不会超过9个）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-SNAPSHOT&lt;/code&gt;：快照&lt;/li&gt;
&lt;li&gt;没有GA版本发布的限定词&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;快照在以上类型中是最先发布的，因为在任何PATCH里他们永远是”最新的预发行版本“。尽管一个PATCH周期第一个部署的artifact永远是一个 -SNAPSHOT ，相似的名字，但是更多最新的快照也会在一个里程碑之后发布或者两个候选版本之间发布。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每个发布周期都有一个代号，延续之前的代号方案，可以在非正式的情况下使用（例如在讨论的时候，博客文章中等等）。这个代号代表着传统意义上的MAJOR.MINOR编号。他们（大多数）来自&lt;a href=&#34;https://en.wikipedia.org/wiki/Periodic_table#Overview&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;元素周期表&lt;/a&gt;
，按字母顺序递增。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;直到Dysprosium，BOM的版本发布方案都是按照一个代号后面加上一个修饰符的方式，并且限定词只是稍微有所不一样。例如：Aluminium-RELEASE (第一个GA版，现在应该是像YYYY.0.1这样的), Bismuth-M1, Californium-SR1 (服务发布现在应该是像YYYY.0.1这样的), Dysprosium-RC1, Dysprosium-BUILD-SNAPSHOT (每次打完补丁之后，我们都会回到相同的快照版本。现在应该是像YYYY.0.X-SNAPSHOT这样的，所以我们每个PATCH一个快照)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;24获取reactor-netty&#34;&gt;2.4.获取Reactor Netty&lt;/h1&gt;
&lt;p&gt;正如我们&lt;a href=&#34;#2.3.%e4%ba%86%e8%a7%a3BOM%e5%92%8c%e7%89%88%e6%9c%ac%e6%96%b9%e6%a1%88&#34;&gt;之前提到&lt;/a&gt;
的，最简单的方式去使用&lt;code&gt;Reactor Netty&lt;/code&gt;是去使用&lt;code&gt;BOM&lt;/code&gt;并且在你的项目中添加相关的依赖。注意，当添加这种依赖关系的时候，不要指定版本，以便从BOM中获取版本。&lt;/p&gt;
&lt;p&gt;当然，如果你想强制使用指定的版本，你可以在添加依赖的时候指定你想用的版本。你也可以不使用BOM的方式，直接使用指定版本的依赖。&lt;/p&gt;
&lt;h2 id=&#34;241maven安装&#34;&gt;2.4.1.Maven安装&lt;/h2&gt;
&lt;p&gt;Maven本身就支持&lt;code&gt;BOM&lt;/code&gt;。首先，你需要在&lt;code&gt;pom.xml&lt;/code&gt;添加以下配置来引入&lt;code&gt;BOM&lt;/code&gt;。如果pom中已经有&lt;code&gt;dependencyManagement&lt;/code&gt;节点了，则只需要直接在里面添加配置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.projectreactor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;reactor-bom&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;Dysprosium-SR10&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;2&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lt;1&amp;gt; 注意&lt;code&gt;dependencyManagement&lt;/code&gt;节点。这个是在&lt;code&gt;dependencies&lt;/code&gt;节点之外的。&lt;/p&gt;
&lt;p&gt;&amp;lt;2&amp;gt; 截至写该文档的时候，&lt;code&gt;Dysprosium-SR10&lt;/code&gt;是最新的&lt;code&gt;BOM&lt;/code&gt;版本。访问 &lt;a href=&#34;https://github.com/reactor/reactor/releases&#34;&gt;https://github.com/reactor/reactor/releases&lt;/a&gt; 检查更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来，在相关的响应式项目中添加依赖，像往常一样（除了没有&lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt;节点），如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.projectreactor.netty&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;reactor-netty-core&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;1&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;2&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.projectreactor.netty&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;reactor-netty-http&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lt;1&amp;gt; 添加&lt;code&gt;Reactor Netty&lt;/code&gt;依赖&lt;/p&gt;
&lt;p&gt;&amp;lt;2&amp;gt; 没有version节点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;242gradle安装&#34;&gt;2.4.2.Gradle安装&lt;/h2&gt;
&lt;p&gt;从Gradle 5版本开始支持&lt;code&gt;BOM&lt;/code&gt;。接下来展示了怎么去引入&lt;code&gt;BOM&lt;/code&gt;并且添加&lt;code&gt;Reactor Netty&lt;/code&gt;依赖：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// import a BOM
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    implementation &lt;span style=&#34;color:#a6e22e&#34;&gt;platform&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;io.projectreactor:reactor-bom:Dysprosium-SR10&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// define dependencies without versions
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;io.projectreactor.netty:reactor-netty-core&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;io.projectreactor.netty:reactor-netty-http&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;lt;1&amp;gt; 截至写该文档的时候，&lt;code&gt;Dysprosium-SR10&lt;/code&gt;是最新的&lt;code&gt;BOM&lt;/code&gt;版本。访问 &lt;a href=&#34;https://github.com/reactor/reactor/releases&#34;&gt;https://github.com/reactor/reactor/releases&lt;/a&gt; 检查更新。&lt;/p&gt;
&lt;p&gt;&amp;lt;2&amp;gt; 这里没有第三部分：版本是单独的部分。从&lt;code&gt;BOM&lt;/code&gt;中获取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;243里程碑和快照&#34;&gt;2.4.3.里程碑和快照&lt;/h2&gt;
&lt;p&gt;里程碑和开发者预览版是通过&lt;code&gt;Spring Milestones&lt;/code&gt;仓库而不是&lt;code&gt;Maven Central&lt;/code&gt;来分发的。要将其添加到您的构建配置文件中，请使用以下代码段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Milestones in Maven&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;spring-milestones&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Spring Milestones Repository&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://repo.spring.io/milestone&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;如果是&lt;code&gt;Gradle&lt;/code&gt;，请使用以下代码段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Milestones in Gradle&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;repositories &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    maven &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://repo.spring.io/milestone&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    mavenCentral&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;25支持和政策&#34;&gt;2.5.支持和政策&lt;/h1&gt;
&lt;p&gt;以下条目是镜像https://github.com/reactor/.github/blob/master/SUPPORT.adoc&lt;/p&gt;
&lt;h2 id=&#34;251你是否还有问题&#34;&gt;2.5.1.你是否还有问题？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;首先在Stack Overflow中查看问题，如果有必要则开始讨论&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你确定为什么没有用，或者想知道是否有更好的方式去实现，请先在&lt;code&gt;Stack Overflow&lt;/code&gt;上查看问题，如果有必要则开始讨论。使用如下的相关的标签：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/reactor-netty&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;reactor-netty&lt;/a&gt;
关于reactor-netty的问题&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/project-reactor&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;project-reactor&lt;/a&gt;
关于一般的响应式问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你更喜欢实时讨论的话，我们也有几个&lt;code&gt;Gitter 频道&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gitter.im/reactor/reactor&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;reactor&lt;/a&gt;
历史上最活跃的一个，大多数社区都可以在这里提供帮助&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitter.im/reactor/reactor-core&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;reactor-core&lt;/a&gt;
针对内部代码库更高级的精确讨论&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitter.im/reactor/reactor-netty&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;reactor-netty&lt;/a&gt;
针对netty相关的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考每个项目的README文件来获取其他的信息来源。&lt;/p&gt;
&lt;p&gt;我们通常不鼓励通过创建GitHub issue来问问题，有利于上述两个频道。&lt;/p&gt;
&lt;h2 id=&#34;252我们的弃用政策&#34;&gt;2.5.2.我们的&lt;code&gt;弃用&lt;/code&gt;政策&lt;/h2&gt;
&lt;p&gt;在处理弃用处理上，例如一个版本&lt;code&gt;A.B.C&lt;/code&gt;，我们会确保：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;A.B.0&lt;/code&gt;版本中弃用的部分不会在&lt;code&gt;A.B+1.0&lt;/code&gt;版本&lt;code&gt;之前&lt;/code&gt;被删除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;A.B.1&lt;/code&gt;版本中弃用的部分不会在&lt;code&gt;A.B+2.0&lt;/code&gt;版本&lt;code&gt;之前&lt;/code&gt;被删除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们会努力在废弃的javadoc中提及如下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被删除的最低版本&lt;/li&gt;
&lt;li&gt;指明不推荐使用的方法的替代方法&lt;/li&gt;
&lt;li&gt;方法被标记为弃用的版本&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;本政策自2021年1月起正式实施，适用于&lt;code&gt;2020.0&lt;/code&gt; BOMs和更新版本中的所有模块，以及&lt;code&gt;Dysprosium-SR15&lt;/code&gt;之后的&lt;code&gt;Dysprosium&lt;/code&gt;版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;删除弃用不是硬性承诺，并且被弃用的方法可能会比那些最小的GA版本存在的更久（意思是：只有问题最严重的被弃用的方法才会被及时删除）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;也就是说，被弃用的代码过了需要被删除的最小版本之后，可能会在后续的任何版本中被删除（包括补丁版本，也就是服务版本），并且不会在通知。所以使用者还是应该尽早的修改自己的代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/reactor/reactor-netty/edit/master/docs/asciidoc/getting-started.adoc&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;编辑&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;目录contents-1&#34;&gt;&lt;a href=&#34;../contents&#34;&gt;目录&lt;/a&gt;
&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>Reactor Netty参考指南 - 1.关于这个文档</title>
      <link>https://www.immuthex.com/posts/reactor-netty-reference-guide/about-the-documentation/</link>
      <pubDate>Sun, 28 Feb 2021 13:50:00 +0800</pubDate>
      
      <guid>https://www.immuthex.com/posts/reactor-netty-reference-guide/about-the-documentation/</guid>
      <description>&lt;h2 id=&#34;目录contents&#34;&gt;&lt;a href=&#34;../contents&#34;&gt;目录&lt;/a&gt;
&lt;/h2&gt;
&lt;hr&gt;
&lt;h1 id=&#34;原文地址httpsprojectreactoriodocsnettyreleasereferenceindexhtmlabout-doc&#34;&gt;&lt;a href=&#34;https://projectreactor.io/docs/netty/release/reference/index.html#about-doc&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;原文地址&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;这一章节是关于&lt;code&gt;Reactor Netty&lt;/code&gt;参考文档的一些简要概述。你可以不用按照顺序阅读整个指南。每一个部分都是独立的，虽然经常会在某一部分引用其他的部分的内容。&lt;/p&gt;
&lt;h1 id=&#34;11最新的版本和版权声明&#34;&gt;1.1.最新的版本和版权声明&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Reactor Netty&lt;/code&gt;参考指南可以通过&lt;code&gt;HTML&lt;/code&gt;文档的形式提供访问。最新的副本可以访问这个网站 &lt;a href=&#34;https://projectreactor.io/docs/netty/release/reference/index.html&#34;&gt;https://projectreactor.io/docs/netty/release/reference/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个文档的副本可以供您自己使用或者提供给其他人使用，但是您不能对该副本收取任何费用并且不管的是印刷版还是电子版，每份副本中都必须包含这个&lt;code&gt;版权声明&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;12贡献文档&#34;&gt;1.2.贡献文档&lt;/h1&gt;
&lt;p&gt;这个参考指南是用&lt;code&gt;Asciidoc&lt;/code&gt;写的，您可以通访问 &lt;a href=&#34;https://github.com/reactor/reactor-netty/tree/master/docs/asciidoc&#34;&gt;https://github.com/reactor/reactor-netty/tree/master/docs/asciidoc&lt;/a&gt; 找到它的原始文件。&lt;/p&gt;
&lt;p&gt;如果你有任何的改进，我们将很高兴收到您的pull request。&lt;/p&gt;
&lt;p&gt;我们建议您检查一下版本库的本地副本，这样您就可以通过&lt;code&gt;asciidoctor&lt;/code&gt; Gradle任务和检查渲染来生成这个文档。有一些章节需要依赖于已包含的文件，所以&lt;code&gt;GitHub&lt;/code&gt;的渲染并不总是完整的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了方便文档的编辑，大部分章节的末尾都有一个链接，可以直接在&lt;code&gt;GitHub&lt;/code&gt;上打开该章节的主源文件的编辑界面。这些链接只存在于这个文档的&lt;code&gt;HTML5&lt;/code&gt;版本中。他们看起来像这样的：&lt;a href=&#34;https://github.com/reactor/reactor-netty/edit/master/docs/asciidoc/about-doc.adoc&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;编辑&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;13-获得帮助&#34;&gt;1.3. 获得帮助&lt;/h1&gt;
&lt;p&gt;您可以通过以下几种方式来获取有关&lt;code&gt;Reactor Netty&lt;/code&gt;的帮助：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;a href=&#34;https://gitter.im/reactor/reactor-netty&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Gitter&lt;/a&gt;
和社区取得联系。&lt;/li&gt;
&lt;li&gt;在stackoverflow.com的&lt;a href=&#34;https://github.com/reactor/reactor-netty/issues&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;reactor-netty&lt;/code&gt;&lt;/a&gt;
板块问问题。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Github&lt;/code&gt;的&lt;a href=&#34;https://github.com/reactor/reactor-netty/issues&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;reactor-netty&lt;/a&gt;
中提出错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Reactor Netty&lt;/code&gt;全部都是开源的，&lt;a href=&#34;https://github.com/reactor/reactor-netty/tree/master/docs/asciidoc&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;包括这个文档&lt;/a&gt;
。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/reactor/reactor-netty/edit/master/docs/asciidoc/about-doc.adoc&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;编辑&lt;/a&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;目录contents-1&#34;&gt;&lt;a href=&#34;../contents&#34;&gt;目录&lt;/a&gt;
&lt;/h2&gt;</description>
    </item>
    
    <item>
      <title>Reactor Netty参考指南</title>
      <link>https://www.immuthex.com/posts/reactor-netty-reference-guide/contents/</link>
      <pubDate>Sun, 28 Feb 2021 13:45:00 +0800</pubDate>
      
      <guid>https://www.immuthex.com/posts/reactor-netty-reference-guide/contents/</guid>
      <description>&lt;h1 id=&#34;原文地址httpsprojectreactoriodocsnettyreleasereferenceindexhtml&#34;&gt;&lt;a href=&#34;https://projectreactor.io/docs/netty/release/reference/index.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;原文地址&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;原作者：Stephane Maldini(@smaldini) Violeta Georgieva(@violeta_g_g)&lt;/p&gt;
&lt;p&gt;版本 1.0.4&lt;/p&gt;
&lt;h1 id=&#34;1关于这个文档about-the-documentation&#34;&gt;&lt;a href=&#34;../about-the-documentation&#34;&gt;1.关于这个文档&lt;/a&gt;
&lt;/h1&gt;
&lt;h1 id=&#34;2入门指南getting-started&#34;&gt;&lt;a href=&#34;../getting-started&#34;&gt;2.入门指南&lt;/a&gt;
&lt;/h1&gt;
&lt;h1 id=&#34;3tcp服务端tcp-server&#34;&gt;&lt;a href=&#34;../tcp-server&#34;&gt;3.TCP服务端&lt;/a&gt;
&lt;/h1&gt;
&lt;h1 id=&#34;4tcp客户端&#34;&gt;4.TCP客户端&lt;/h1&gt;
&lt;h1 id=&#34;5http服务端&#34;&gt;5.HTTP服务端&lt;/h1&gt;
&lt;h1 id=&#34;6http客户端&#34;&gt;6.HTTP客户端&lt;/h1&gt;
&lt;h1 id=&#34;7udp服务端&#34;&gt;7.UDP服务端&lt;/h1&gt;
&lt;h1 id=&#34;8udp客户端&#34;&gt;8.UDP客户端&lt;/h1&gt;</description>
    </item>
    
    <item>
      <title>git cherry-pick 教程</title>
      <link>https://www.immuthex.com/posts/git-cherry-pick-tutorial/</link>
      <pubDate>Sun, 28 Feb 2021 11:49:00 +0800</pubDate>
      
      <guid>https://www.immuthex.com/posts/git-cherry-pick-tutorial/</guid>
      <description>&lt;p&gt;在多分支开发的时候会有需要把一个分支的部分commit应用到其他的分支上，&lt;code&gt;git merge&lt;/code&gt;就满足不了这个需求了，这个时候就可以用&lt;code&gt;git cherry-pick&lt;/code&gt;，它的作用是选择已存在的commit应用到当前分支上，并产生新的commit SHA-1 校验和。下面是这个命令的图解示例。&lt;/p&gt;
&lt;h1 id=&#34;图解示例&#34;&gt;图解示例&lt;/h1&gt;
&lt;p&gt;如下有两个分支&lt;code&gt;master&lt;/code&gt;和&lt;code&gt;dev&lt;/code&gt;，从&lt;code&gt;C2&lt;/code&gt;开始两个分支开始有不同的commits。&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://www.immuthex.com/img/git-cherry-pick-tutorial/sample1.png&#34;
        alt=&#34;sample1&#34;/&gt;&lt;/p&gt;
&lt;p&gt;需要把&lt;code&gt;dev&lt;/code&gt;的&lt;code&gt;C6&lt;/code&gt;合并到&lt;code&gt;master&lt;/code&gt;，只需在&lt;code&gt;master&lt;/code&gt;分支上执行&lt;code&gt;git cherry-pick C6&lt;/code&gt;，就会把&lt;code&gt;dev&lt;/code&gt;分支的&lt;code&gt;C6&lt;/code&gt;应用到&lt;code&gt;master&lt;/code&gt;分支上并产生一个新的commit&lt;code&gt;C6&#39;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://www.immuthex.com/img/git-cherry-pick-tutorial/sample2.png&#34;
        alt=&#34;sample2&#34;/&gt;&lt;/p&gt;
&lt;p&gt;如果要合并多个commits，比如&lt;code&gt;C7&lt;/code&gt;和&lt;code&gt;C8&lt;/code&gt;两个commits，可以执行&lt;code&gt;git cherry-pick C7 C8&lt;/code&gt;，则git提交记录就会变成下面这样。&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://www.immuthex.com/img/git-cherry-pick-tutorial/sample3.png&#34;
        alt=&#34;sample3&#34;/&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，新的commit SHA-1 校验和会和原来的commit SHA-1 校验和不一样。&lt;/p&gt;
&lt;h1 id=&#34;基本用法&#34;&gt;基本用法&lt;/h1&gt;
&lt;p&gt;下面我们来动手感受一下。先准备一下git的提交记录，示例如下图：&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://www.immuthex.com/img/git-cherry-pick-tutorial/prepare-git-commits.png&#34;
        alt=&#34;prepare git commits&#34;/&gt;&lt;/p&gt;
&lt;p&gt;这个时候&lt;code&gt;master&lt;/code&gt;分支有C1，C2，C3，C4文件，&lt;code&gt;dev&lt;/code&gt;分支有C1，C2，C5，C6，C7，C8，C9文件。&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://www.immuthex.com/img/git-cherry-pick-tutorial/view-files-on-both-branch.png&#34;
        alt=&#34;view files on both branch&#34;/&gt;&lt;/p&gt;
&lt;p&gt;接下来我们把&lt;code&gt;dev&lt;/code&gt;分支的一些commits应用到&lt;code&gt;master&lt;/code&gt;分支：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据之前的终端记录或者通过&lt;code&gt;git log dev&lt;/code&gt;查看&lt;code&gt;C6&lt;/code&gt;的 SHA-1 校验和是&lt;code&gt;fca3793&lt;/code&gt;，在&lt;code&gt;master&lt;/code&gt;分支上执行&lt;code&gt;git cherry-pick fca3793&lt;/code&gt;，可以看到新增了一个 SHA-1 校验和为&lt;code&gt;50982a2&lt;/code&gt;的commit并且在&lt;code&gt;master&lt;/code&gt;分支上多了一个C6文件。&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;git cherry-pick d67e9f6 7bf5e7d&lt;/code&gt;之后，&lt;code&gt;master&lt;/code&gt;分支又多了C7，C8两个文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img  src=&#34;https://www.immuthex.com/img/git-cherry-pick-tutorial/do-cherry-pick.png&#34;
        alt=&#34;do cherry pick&#34;/&gt;&lt;/p&gt;
&lt;h1 id=&#34;其他用法&#34;&gt;其他用法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果想应用连续的多个commits还可以使用&lt;code&gt;git cherry-pick commit1..commitn&lt;/code&gt;，应用 SHA-1 校验和从&lt;code&gt;commit1&lt;/code&gt;到&lt;code&gt;commitn&lt;/code&gt;的commits，&lt;strong&gt;注意这里并不包含&lt;code&gt;commit1&lt;/code&gt;，如果需要包含可以执行&lt;code&gt;git cherry-pick commit1^..commitn&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果只想把某一个分支最后一个commit应用到当前分支，可以直接使用&lt;code&gt;git cherry-pick branch-name&lt;/code&gt;，这个命令的效果是，将&lt;code&gt;branch-name&lt;/code&gt;分支最后一个commit应用到当前分支。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当然实际使用过程中，使用&lt;code&gt;cherry-pick&lt;/code&gt;可能会出现冲突，例如提示如下：
&lt;img  src=&#34;https://www.immuthex.com/img/git-cherry-pick-tutorial/cherry-pick-conflict.png&#34;
        alt=&#34;cherry pick conflict&#34;/&gt;&lt;/p&gt;
&lt;p&gt;解决冲突再执行&lt;code&gt;git add &amp;lt;paths&amp;gt;&lt;/code&gt;将文件标记为以解决冲突，或者执行&lt;code&gt;git rm &amp;lt;paths&amp;gt;&lt;/code&gt;直接从暂存区和工作区删除文件，最后执行&lt;code&gt;git cherry-pick --continue&lt;/code&gt;，则完成这次&lt;code&gt;cherry-pick&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果想要取消这次的&lt;code&gt;cherry-pick&lt;/code&gt;操作可以执行&lt;code&gt;git cherry-pick --abort&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>